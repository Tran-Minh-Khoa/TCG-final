const express = require('express');
const router = express.Router();
const controller = require('./payment.controler')

//Chuy·ªÉn ƒë·ªëng n√†y qua controller üò∫
const Order = require('../../../models/Order');
const OrderDetail = require('../../../models/OrderDetail');
const servicePayment = require('./payment.service');
// let $ = require('jquery');
// const request = require('request');
const moment = require('moment');
/* GET home page. */

function sortObject(obj) {
	let sorted = {};
	let str = [];
	let key;
	for (key in obj){
		if (obj.hasOwnProperty(key)) {
		str.push(encodeURIComponent(key));
		}
	}
	str.sort();
    for (key = 0; key < str.length; key++) {
        sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
    }
    return sorted;
}

router.post('/create_payment_url', async (req, res, next) =>{
    
    // process.env.TZ = 'Asia/Ho_Chi_Minh';
    
    let date = new Date();
    let createDate = moment(date).format('YYYYMMDDHHmmss');
    
    let ipAddr = req.headers['x-forwarded-for'] ||
        req.ip ||
        req.socket.remoteAddress ||
        req.socket.remoteAddress;

    // ipAddr='127.0.0.1';

    let tmnCode = process.env.vnp_TmnCode;
    let secretKey = process.env.vnp_HashSecret;
    let vnpUrl = process.env.vnp_Url;
    let returnUrl = process.env.vnp_ReturnUrl;
    let orderId =req.body.orderId || moment(date).format('DDHHmmss');
    const order= await Order.findOne({id: orderId})
    let amount = order?.totalPrice;

    let bankCode = req.body.bankCode;
    
    let locale = req.body.language;
    if(locale === null || locale === ''){
        locale = 'vn';
    }
    let currCode = 'VND';
    let vnp_Params = {};
    vnp_Params['vnp_Version'] = '2.1.0';
    vnp_Params['vnp_Command'] = 'pay';
    vnp_Params['vnp_TmnCode'] = tmnCode;
    vnp_Params['vnp_Locale'] = 'vn';
    vnp_Params['vnp_CurrCode'] = currCode;
    vnp_Params['vnp_TxnRef'] = orderId;
    vnp_Params['vnp_OrderInfo'] = 'Thanh toan cho ma GD:' + orderId;
    vnp_Params['vnp_OrderType'] = 'other';
    vnp_Params['vnp_Amount'] = parseInt(amount * 100*1000000);
    // vnp_Params['vnp_Amount'] = 500000;

    vnp_Params['vnp_ReturnUrl'] = returnUrl;
    vnp_Params['vnp_IpAddr'] = ipAddr;
    vnp_Params['vnp_CreateDate'] = createDate;
    if(bankCode !== null && bankCode !== ''){
        vnp_Params['vnp_BankCode'] = bankCode;
    }
    vnp_Params['vnp_BankCode'] = 'NCB';
    vnp_Params = sortObject(vnp_Params);

    let querystring = require('qs');
    let signData = querystring.stringify(vnp_Params, { encode: false });
    let crypto = require("crypto");     
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex"); 
    vnp_Params['vnp_SecureHash'] = signed;
    vnpUrl += '?' + querystring.stringify(vnp_Params, { encode: false });
    // console.log(vnpUrl)
    res.status(201).json({link: vnpUrl})
});

router.get('/vnpay_return', async (req, res, next) =>{
    let vnp_Params = req.query;
    // console.log(vnp_Params)
    let secureHash = vnp_Params['vnp_SecureHash'];
    console.log('test hash api')
    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    vnp_Params = sortObject(vnp_Params);

    let tmnCode = process.env.vnp_TmnCode;
    let secretKey = process.env.vnp_HashSecret;

    let querystring = require('qs');
    let signData = querystring.stringify(vnp_Params, { encode: false });
    let crypto = require("crypto");     
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");
    const orderId=vnp_Params['vnp_TxnRef'];
    if (vnp_Params['vnp_ResponseCode']!== '00') {
        //Kiem tra xem du lieu trong db co hop le hay khong va thong bao ket qua
        // console.log('Ket qua thanh cong',vnp_Params['vnp_ResponseCode']);
       return res.redirect('/account')
    }
    if(secureHash === signed){
        //Kiem tra xem du lieu trong db co hop le hay khong va thong bao ket qua
        // console.log('Ket qua thanh cong',vnp_Params['vnp_ResponseCode']);
        const order= await Order.findOne({id: orderId})
        order.status='pending'
        await order.save()
        await servicePayment.RemoveCart(req.user.id)
        const orderDetails = await OrderDetail.find({ orderId: orderId });
            for (const detail of orderDetails) {
                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th·∫ª sau khi mua h√†ng th√†nh c√¥ng
                await servicePayment.UpdateCardAmount(detail.cardId, detail.quantity);
            }
        
        console.log('Ket qua thanh cong',vnp_Params['vnp_ResponseCode']);
        // res.render('success', {code: vnp_Params['vnp_ResponseCode']})
        res.redirect('/account')
    } else{
        // res.render('success', {code: '97'})
        res.redirect('/account')

    }
});

router.get('/vnpay_ipn', function (req, res, next) {
    let vnp_Params = req.query;
    let secureHash = vnp_Params['vnp_SecureHash'];
    
    let orderId = vnp_Params['vnp_TxnRef'];
    let rspCode = vnp_Params['vnp_ResponseCode'];

    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];
    console.log('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
    vnp_Params = sortObject(vnp_Params);
    let secretKey = process.env.vnp_HashSecret;
    let querystring = require('qs');
    let signData = querystring.stringify(vnp_Params, { encode: false });
    let crypto = require("crypto");     
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");
    
    let paymentStatus = '0'; // Gi·∫£ s·ª≠ '0' l√† tr·∫°ng th√°i kh·ªüi t·∫°o giao d·ªãch, ch∆∞a c√≥ IPN. Tr·∫°ng th√°i n√†y ƒë∆∞·ª£c l∆∞u khi y√™u c·∫ßu thanh to√°n chuy·ªÉn h∆∞·ªõng sang C·ªïng thanh to√°n VNPAY t·∫°i ƒë·∫ßu kh·ªüi t·∫°o ƒë∆°n h√†ng.
    //let paymentStatus = '1'; // Gi·∫£ s·ª≠ '1' l√† tr·∫°ng th√°i th√†nh c√¥ng b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥
    //let paymentStatus = '2'; // Gi·∫£ s·ª≠ '2' l√† tr·∫°ng th√°i th·∫•t b·∫°i b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥
    
    let checkOrderId = true; // M√£ ƒë∆°n h√†ng "gi√° tr·ªã c·ªßa vnp_TxnRef" VNPAY ph·∫£n h·ªìi t·ªìn t·∫°i trong CSDL c·ªßa b·∫°n
    let checkAmount = true; // Ki·ªÉm tra s·ªë ti·ªÅn "gi√° tr·ªã c·ªßa vnp_Amout/100" tr√πng kh·ªõp v·ªõi s·ªë ti·ªÅn c·ªßa ƒë∆°n h√†ng trong CSDL c·ªßa b·∫°n
    if(secureHash === signed){ //ki·ªÉm tra checksum
        if(checkOrderId){
            if(checkAmount){
                if(paymentStatus=="0"){ //ki·ªÉm tra t√¨nh tr·∫°ng giao d·ªãch tr∆∞·ªõc khi c·∫≠p nh·∫≠t t√¨nh tr·∫°ng thanh to√°n
                    if(rspCode=="00"){
                        //thanh cong
                        //paymentStatus = '1'
                        // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th√†nh c√¥ng v√†o CSDL c·ªßa b·∫°n
                        res.status(200).json({RspCode: '00', Message: 'Success'})
                    }
                    else {
                        //that bai
                        //paymentStatus = '2'
                        // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th·∫•t b·∫°i v√†o CSDL c·ªßa b·∫°n
                        res.status(200).json({RspCode: '00', Message: 'Success'})
                    }
                }
                else{
                    res.status(200).json({RspCode: '02', Message: 'This order has been updated to the payment status'})
                }
            }
            else{
                res.status(200).json({RspCode: '04', Message: 'Amount invalid'})
            }
        }       
        else {
            res.status(200).json({RspCode: '01', Message: 'Order not found'})
        }
    }
    else {
        res.status(200).json({RspCode: '97', Message: 'Checksum failed'})
    }
});


module.exports = router;
